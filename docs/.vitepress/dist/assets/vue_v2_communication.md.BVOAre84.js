import{_ as t,c as a,o,ag as s}from"./chunks/framework.DPDPlp3K.js";const h=JSON.parse('{"title":"Vue2 组件通信","description":"","frontmatter":{"outline":[2,3]},"headers":[],"relativePath":"vue/v2/communication.md","filePath":"vue/v2/communication.md","lastUpdated":null}'),i={name:"vue/v2/communication.md"};function l(r,e,n,d,p,u){return o(),a("div",null,e[0]||(e[0]=[s(`<h1 id="vue2-组件通信" tabindex="-1">Vue2 组件通信 <a class="header-anchor" href="#vue2-组件通信" aria-label="Permalink to &quot;Vue2 组件通信&quot;">​</a></h1><h2 id="_1、父子通信" tabindex="-1">1、父子通信 <a class="header-anchor" href="#_1、父子通信" aria-label="Permalink to &quot;1、父子通信&quot;">​</a></h2><p>父子组件通信是 Vue 开发中最常用的场景，主要包括 父传子 和 子传父 两种方向</p><h3 id="props-父-→-子" tabindex="-1">props（父 → 子） <a class="header-anchor" href="#props-父-→-子" aria-label="Permalink to &quot;props（父 → 子）&quot;">​</a></h3><p>父组件通过props属性向子组件传递数据。 - 单向数据流（子组件不能直接修改 props， props是只读的）。 - 支持类型校验和默认值。</p><h3 id="emit-v-on-子-→-父" tabindex="-1">$emit / v-on（子 → 父） <a class="header-anchor" href="#emit-v-on-子-→-父" aria-label="Permalink to &quot;$emit / v-on（子 → 父）&quot;">​</a></h3><p>子组件通过事件向父组件传递数据。</p><ul><li>自定义事件名（如 @update）。</li><li>可携带参数。</li></ul><h3 id="v-model-双向绑定语法糖" tabindex="-1">v-model（双向绑定语法糖） <a class="header-anchor" href="#v-model-双向绑定语法糖" aria-label="Permalink to &quot;v-model（双向绑定语法糖）&quot;">​</a></h3><p>简化父子组件的双向数据绑定。</p><ul><li>父组件通过 v-model 传递数据。</li><li>子组件通过 value prop 接收，通过 input 事件更新。</li></ul><h3 id="ref-获取子组件实例" tabindex="-1">ref（获取子组件实例） <a class="header-anchor" href="#ref-获取子组件实例" aria-label="Permalink to &quot;ref（获取子组件实例）&quot;">​</a></h3><pre><code>父组件通过访问子组件设置的ref， 直接 $refs 调用子组件的方法或访问数据。
</code></pre><h3 id="sync-修饰符-双向修改机制" tabindex="-1">.sync 修饰符 (双向修改机制) <a class="header-anchor" href="#sync-修饰符-双向修改机制" aria-label="Permalink to &quot;.sync 修饰符 (双向修改机制)&quot;">​</a></h3><ul><li>父组件给子组件设置 .sync</li><li>子组件 通过 $emit(&#39;update:prop&#39;, newValue) 修改父组件的数据。</li></ul><p>适用场景：</p><ul><li>场景 1：子组件需要修改父组件的某个状态（如开关、计数器、弹窗显隐）。</li><li>场景 2：希望代码比 v-model 更语义化（明确绑定的是哪个属性）。</li></ul><p>Vue3 中改用 v-model:prop，原理相同但语法更统一</p><h2 id="_2、兄弟通信" tabindex="-1">2、兄弟通信 <a class="header-anchor" href="#_2、兄弟通信" aria-label="Permalink to &quot;2、兄弟通信&quot;">​</a></h2><p>兄弟通信的核心思想： “通过第三方媒介传递数据”（父组件、事件总线、Vuex 均是媒介）。</p><h3 id="通过共同的父组件-emit-→-父-→-props" tabindex="-1">通过共同的父组件（$emit → 父 → props） <a class="header-anchor" href="#通过共同的父组件-emit-→-父-→-props" aria-label="Permalink to &quot;通过共同的父组件（$emit → 父 → props）&quot;">​</a></h3><h3 id="事件总线-eventbus" tabindex="-1">事件总线（EventBus） <a class="header-anchor" href="#事件总线-eventbus" aria-label="Permalink to &quot;事件总线（EventBus）&quot;">​</a></h3><p>创建一个全局 Vue 实例作为事件中心，兄弟组件通过 $on 监听和 $emit 触发事件。</p><ul><li><p>创建事件总线（通常单独放在一个文件中）： <code>export const EventBus = new Vue();</code></p></li><li><p>EventBus.$emit(&quot;message&quot;, &quot;Data from BrotherA&quot;);</p></li><li><p>EventBus.$on(&quot;message&quot;, (data) =&gt; { })</p></li><li><p>EventBus.$off(&quot;message&quot;); <code>beforeDestroy 及时清理</code></p></li><li><p>任意组件间的通信（兄弟、跨级、无关联组件）。</p></li><li><p>缺点：事件名需全局唯一，大型项目易混乱。</p></li></ul><h2 id="_3、跨级通信" tabindex="-1">3、跨级通信 <a class="header-anchor" href="#_3、跨级通信" aria-label="Permalink to &quot;3、跨级通信&quot;">​</a></h2><p>“跨级通信的核心是 找中介——要么通过父链（$attrs/provide），要么通过全局管家（事件总线/Vuex）。”</p><h3 id="attrs-listeners-透传属性和事件" tabindex="-1">$attrs / $listeners（透传属性和事件） <a class="header-anchor" href="#attrs-listeners-透传属性和事件" aria-label="Permalink to &quot;$attrs / $listeners（透传属性和事件）&quot;">​</a></h3><p>父组件作为中间层，需要透传属性和事件到深层子组件</p><p>优点</p><ul><li>✅ 减少中间层代码：自动透传属性和事件，避免在中间组件手动传递 props 和 $emit。</li><li>✅ 灵活性强：适合封装高阶组件（如UI库的封装），支持动态属性和事件。</li><li>✅ 显式数据流：通过 v-bind=&quot;$attrs&quot; 和 v-on=&quot;$listeners&quot; 明确传递路径。</li></ul><p>缺点</p><ul><li>❌ 属性名冲突风险：如果透传的属性名与子组件已有的 props 或 data 冲突，可能导致意外行为。</li><li>❌ 无类型校验：$attrs 中的属性没有类型检查（不像 props 可以定义 type）。</li><li>❌ 需手动处理 class 和 style：默认会自动绑定到根元素，需设置 inheritAttrs: false 禁用。</li></ul><h3 id="provide-inject-依赖注入" tabindex="-1">provide / inject（依赖注入） <a class="header-anchor" href="#provide-inject-依赖注入" aria-label="Permalink to &quot;provide / inject（依赖注入）&quot;">​</a></h3><p>祖先组件提供数据，任意后代组件注入使用（无需逐层传递）。</p><p>优点</p><ul><li>✅ 跨任意层级通信：祖先组件提供数据，任意后代组件可直接注入，无视层级深度。</li><li>✅ 减少链式传递：避免 props 逐层传递的冗余代码。</li><li>✅ 适合全局配置：如主题、用户权限、语言包等全局数据。</li></ul><p>缺点</p><ul><li>❌ 数据来源不透明：后代组件无法直观看出数据来自哪个祖先，调试困难。</li><li>❌ 响应式限制：默认注入的数据不是响应式（需手动传入响应式对象或使用 computed）。</li><li>❌ 耦合性高：滥用会导致组件间隐式依赖，难以维护。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>必须显式注入响应式对象（如 computed 或 Vue 实例）：</span></span>
<span class="line"><span>// 祖先组件</span></span>
<span class="line"><span>provide() {</span></span>
<span class="line"><span>  return {</span></span>
<span class="line"><span>    count: Vue.observable({ value: 0 }) // 或 this.count（如果是响应式数据）</span></span>
<span class="line"><span>  };</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="_4、vuex-通信" tabindex="-1">4、Vuex 通信 <a class="header-anchor" href="#_4、vuex-通信" aria-label="Permalink to &quot;4、Vuex 通信&quot;">​</a></h2><table tabindex="0"><thead><tr><th>概念</th><th>作用</th><th>特点</th></tr></thead><tbody><tr><td>​<strong>State</strong></td><td>存储应用的状态数据（唯一数据源）</td><td>响应式，组件通过 <code>$store.state</code> 访问</td></tr><tr><td>​<strong>Getters</strong></td><td>从 state 派生状态（类似计算属性）</td><td>通过 <code>$store.getters</code> 访问，结果可缓存</td></tr><tr><td>​<strong>Mutations</strong></td><td>同步修改 state 的方法（唯一修改方式）</td><td>通过 <code>commit</code> 触发，支持状态变更追踪（如 devtools 调试）</td></tr><tr><td>​<strong>Actions</strong></td><td>处理异步操作（如 API 请求），提交 mutations 修改 state</td><td>通过 <code>dispatch</code> 触发，可组合多个 mutations 或异步操作</td></tr><tr><td>​<strong>Modules</strong></td><td>将 store 分割为多个模块（适用于大型应用）</td><td>每个模块独立管理 <code>state</code>、<code>mutations</code>、<code>actions</code>、<code>getters</code>，支持命名空间</td></tr></tbody></table>`,41)]))}const m=t(i,[["render",l]]);export{h as __pageData,m as default};
