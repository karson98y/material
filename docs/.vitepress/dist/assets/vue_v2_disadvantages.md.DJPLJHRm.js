import{_ as i,c as a,o as l,ag as n}from"./chunks/framework.DPDPlp3K.js";const E=JSON.parse('{"title":"vue2 有哪些弊端，为此有哪些改进？","description":"","frontmatter":{},"headers":[],"relativePath":"vue/v2/disadvantages.md","filePath":"vue/v2/disadvantages.md","lastUpdated":null}'),t={name:"vue/v2/disadvantages.md"};function e(h,s,p,k,r,d){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="vue2-有哪些弊端-为此有哪些改进" tabindex="-1">vue2 有哪些弊端，为此有哪些改进？ <a class="header-anchor" href="#vue2-有哪些弊端-为此有哪些改进" aria-label="Permalink to &quot;vue2 有哪些弊端，为此有哪些改进？&quot;">​</a></h1><h2 id="核心架构弊端" tabindex="-1">核心架构弊端 <a class="header-anchor" href="#核心架构弊端" aria-label="Permalink to &quot;核心架构弊端&quot;">​</a></h2><p><strong>1、响应式系统的局限性</strong></p><ul><li>问题：<code>基于 Object.defineProperty 的实现</code><ul><li>无法检测对象属性的添加/删除</li><li>数组变异方法需要特殊处理</li><li>初始化时递归遍历对象性能消耗大</li></ul></li><li>改进方案: <ul><li>Vue3：改用 Proxy 实现响应式</li><li>临时方案：使用 Vue.set/Vue.delete</li></ul></li></ul><p><strong>2、虚拟 DOM 性能瓶颈</strong></p><ul><li>问题: <ul><li>全量对比虚拟 DOM</li><li>组件级别颗粒度较粗</li></ul></li><li>改进方案： <ul><li>Vue3：引入编译时优化（Patch Flags）动态节点</li><li>优化手段：合理使用 key，避免 v-if/v-for 共用</li></ul></li></ul><h2 id="开发体验问题" tabindex="-1">开发体验问题 <a class="header-anchor" href="#开发体验问题" aria-label="Permalink to &quot;开发体验问题&quot;">​</a></h2><p><strong>1、逻辑复用困难</strong></p><ul><li>问题：Mixins 存在命名冲突 <ul><li>命名冲突：多个 Mixins 可能定义相同的 data、methods 或生命周期钩子，导致覆盖。</li><li>隐式依赖：难以追踪属性和方法的来源。</li><li>全局污染：所有混入内容都会注入到组件中，即使未使用。</li></ul></li><li>改进方案： <ul><li>Vue3：Composition API</li><li>Vue2：使用 Renderless Components（无渲染组件） 或 Scoped Slots（作用域插槽） <ul><li>Renderless Components 只管理逻辑（无模板），通过 ​Scoped Slots 将数据和方法暴露给子组件。 子组件通过插槽按需使用，避免命名污染。</li></ul></li></ul></li></ul><p><strong>定义 Renderless 组件</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Renderless 组件（无模板）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    increment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 通过 scoped slot 暴露数据和方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$scopedSlots.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.count,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      increment: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.increment</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p><strong>在父组件中使用</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">counter-logic</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-slot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ count, increment }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;!-- 按需使用，命名完全可控 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> @click=&quot;increment&quot;&gt;点击增加:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {{ count }}</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;/button&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">  &lt;/counter-logic&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;/template&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;script&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CounterLogic</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./CounterLogic.vue&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">export</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  components: { CounterLogic }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;/script&gt;</span></span></code></pre></div><p><strong>何时选择 Renderless 组件？</strong></p><ul><li>需要复用复杂逻辑​（如表单验证、异步请求）。</li><li>多个组件共享相同逻辑但 UI 不同。</li><li>项目较大，需避免命名冲突。</li></ul><p><strong>何时仍用 Mixins？</strong></p><ul><li>简单工具方法（如 formatDate）。</li><li>小型项目，逻辑简单且无命名冲突风险。</li></ul><p><strong>总结</strong></p><p>通过 ​Renderless Components + Scoped Slots，你可以将 Vue 2 的逻辑复用从 Mixins 的“隐式共享”转变为“显式传递”，彻底解决命名冲突问题，同时提升代码可维护性。这一模式也是 Vue 3 ​Composition API 的设计前身，迁移到 Vue 3 时会更加顺畅。</p><h2 id="工程化问题" tabindex="-1">工程化问题 <a class="header-anchor" href="#工程化问题" aria-label="Permalink to &quot;工程化问题&quot;">​</a></h2><p><strong>1、体积较大</strong></p><ul><li>问题: <ul><li>包含所有功能的全量包较大（~20KB gzipped）</li><li>按需加载支持有限</li></ul></li><li>改进方案： <ul><li>Vue3：更好的 Tree-shaking</li><li>Vue2：使用 babel-plugin-import 部分导入</li></ul></li></ul>`,22)]))}const g=i(t,[["render",e]]);export{E as __pageData,g as default};
