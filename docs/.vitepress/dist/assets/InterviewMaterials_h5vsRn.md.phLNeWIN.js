import{_ as e,c as d,o as r,ag as a}from"./chunks/framework.DPDPlp3K.js";const R=JSON.parse('{"title":"H5 VS RN","description":"","frontmatter":{},"headers":[],"relativePath":"InterviewMaterials/h5vsRn.md","filePath":"InterviewMaterials/h5vsRn.md","lastUpdated":1743645611000}'),o={name:"InterviewMaterials/h5vsRn.md"};function n(i,t,s,h,l,c){return r(),d("div",null,t[0]||(t[0]=[a('<h1 id="h5-vs-rn" tabindex="-1">H5 VS RN <a class="header-anchor" href="#h5-vs-rn" aria-label="Permalink to &quot;H5 VS RN&quot;">​</a></h1><h2 id="h5-体验不如-react-native-rn" tabindex="-1">H5 体验不如 React Native（RN） <a class="header-anchor" href="#h5-体验不如-react-native-rn" aria-label="Permalink to &quot;H5 体验不如 React Native（RN）&quot;">​</a></h2><p>核心原因在于 ​底层渲染机制和运行环境的本质差异</p><ul><li>H5 的浏览器渲染模型</li><li>多层级渲染管线： H5 的渲染需要经过 ​DOM 解析 → CSS 计算 → 布局（Layout） → 绘制（Paint） → 合成（Composite）​ 多步骤，每一步都可能触发性能瓶颈（如复杂 CSS 动画导致频繁重绘）。</li><li>RN 的原生组件渲染</li><li>直接映射原生组件： RN 的<code>&lt;View&gt;、&lt;Text&gt;</code> 等组件直接对应 iOS 的 UIView 和 Android 的 TextView，省去浏览器渲染管线。</li><li>​线程模型优化： JS 线程与 UI 线程分离，复杂计算不会直接阻塞渲染（尽管频繁跨线程通信仍有性能损耗）。</li></ul><h2 id="​功能与体验对比" tabindex="-1">​<strong>功能与体验对比</strong> <a class="header-anchor" href="#​功能与体验对比" aria-label="Permalink to &quot;​**功能与体验对比**&quot;">​</a></h2><table tabindex="0"><thead><tr><th>维度</th><th>H5 内嵌（WebView）</th><th>React Native（RN）</th><th>适用场景建议</th></tr></thead><tbody><tr><td>​<strong>登录页加载速度</strong></td><td>依赖网络加载 HTML/JS/CSS，首屏可能白屏</td><td>JS Bundle 可预加载，启动速度接近原生</td><td>对首屏速度敏感选 RN（如高频工具类 App）</td></tr><tr><td>​<strong>表单交互体验</strong></td><td>输入卡顿（iOS 键盘遮挡常见）</td><td>原生 TextInput + 自动滚动，动画更流畅</td><td>表单密集型场景（如电商下单页）优先 RN</td></tr><tr><td>​<strong>网络请求处理</strong></td><td>需处理 CORS 跨域问题</td><td>直接使用原生 Fetch/XHR，无跨域限制</td><td>需跨域调用多接口时选 RN（如聚合型应用）</td></tr><tr><td>​<strong>第三方登录</strong></td><td>需跳转浏览器授权，流程中断</td><td>调用原生 SDK（微信/Google），无缝授权</td><td>强依赖第三方登录选 RN（如社交类 App）</td></tr><tr><td>​<strong>用户感知</strong></td><td>URL 变化可见，有网页感</td><td>页面过渡原生级流畅</td><td>追求原生体验选 RN（如金融/高端电商 App）</td></tr></tbody></table><hr><h2 id="​安全风险对比" tabindex="-1">​<strong>安全风险对比</strong> <a class="header-anchor" href="#​安全风险对比" aria-label="Permalink to &quot;​**安全风险对比**&quot;">​</a></h2><table tabindex="0"><thead><tr><th>风险点</th><th>H5 内嵌（WebView）</th><th>React Native（RN）</th><th>缓解方案</th></tr></thead><tbody><tr><td>​<strong>Token 存储</strong></td><td>存于 localStorage，易被 XSS 窃取</td><td>原生加密存储（Keychain/Keystore）</td><td>H5：短期 Token + HttpOnly Cookie</td></tr><tr><td>​<strong>中间人攻击</strong></td><td>未用 HTTPS 时请求可被拦截</td><td>原生库强制证书校验（如 OkHttp 证书锁定）</td><td>强制全站 HTTPS + HSTS 头（RN 更易实现）</td></tr><tr><td>​<strong>代码混淆</strong></td><td>JS 压缩仍可逆向（关键逻辑暴露）</td><td>原生混淆（ProGuard）+ JS 混淆（Hermes 字节码）</td><td>H5：混淆 + 反调试；RN：分层混淆 + JSI 原生化</td></tr></tbody></table><hr>',10)]))}const g=e(o,[["render",n]]);export{R as __pageData,g as default};
