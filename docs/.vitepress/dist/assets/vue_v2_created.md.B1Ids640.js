import{_ as a,c as l,o as i,ag as t}from"./chunks/framework.DPDPlp3K.js";const c=JSON.parse('{"title":"生命周期总览","description":"","frontmatter":{"outline":[2,3]},"headers":[],"relativePath":"vue/v2/created.md","filePath":"vue/v2/created.md","lastUpdated":null}'),o={name:"vue/v2/created.md"};function d(r,e,u,n,s,h){return i(),l("div",null,e[0]||(e[0]=[t(`<h1 id="生命周期总览" tabindex="-1">生命周期总览 <a class="header-anchor" href="#生命周期总览" aria-label="Permalink to &quot;生命周期总览&quot;">​</a></h1><p>必考的核心生命周期钩子</p><h2 id="初始化创建阶段" tabindex="-1">初始化创建阶段 <a class="header-anchor" href="#初始化创建阶段" aria-label="Permalink to &quot;初始化创建阶段&quot;">​</a></h2><h3 id="beforecreated" tabindex="-1">beforeCreated <a class="header-anchor" href="#beforecreated" aria-label="Permalink to &quot;beforeCreated&quot;">​</a></h3><p>触发时机</p><ul><li>Vue 实例初始化后，​数据观测（Data Observer）和事件/生命周期初始化之前执行</li><li><code>data、methods、computed、DOM</code> 均不可访问。</li></ul><p>核心用途</p><ul><li>极低使用率：常规业务逻辑几乎用不到。</li></ul><p>特殊场景：</p><ul><li>在 Vue 插件开发中注入全局逻辑（如 Vuex 的初始化）。</li><li>自定义 SSR（服务端渲染）逻辑。</li></ul><h4 id="面试问题" tabindex="-1">面试问题 <a class="header-anchor" href="#面试问题" aria-label="Permalink to &quot;面试问题&quot;">​</a></h4><p>​Q: beforeCreate 中能访问 Vuex 的 state 吗？</p><p>​A: <code>不能，此时 Vuex 还未注入（通常插件注入在 created 之后）。</code></p><h3 id="created" tabindex="-1">created <a class="header-anchor" href="#created" aria-label="Permalink to &quot;created&quot;">​</a></h3><p>触发时机</p><ul><li>数据观测、属性计算完成，但 ​DOM 未挂载。</li><li>data、methods、computed ​已可用，<code>DOM）不可用</code></li></ul><p>​核心作用：</p><ul><li>初始化非 DOM 数据​（如从 LocalStorage 读取配置）。</li><li>​异步请求​（需注意组件销毁时的请求取消）。</li><li>事件监听​（如使用 EventBus 跨组件通信）。</li></ul><p>注意问题：</p><ul><li>避免阻塞操作：长时间同步任务会延迟渲染。</li><li>​处理异步请求的竞态问题​（如组件销毁后响应到达时的错误处理）。</li></ul><h4 id="面试问题​" tabindex="-1">面试问题​ <a class="header-anchor" href="#面试问题​" aria-label="Permalink to &quot;面试问题​&quot;">​</a></h4><ul><li><p>Q: 为什么不在 beforeCreate 中发请求？</p></li><li><p>A: data 未初始化，无法操作数据。</p></li><li><p>​Q: created 和 mounted 异步请求的区别？ ​- A: created 的请求更早发出，减少等待时间，但无法操作 DOM；mounted 可操作 DOM，但可能延迟用户体验。</p></li></ul><h2 id="挂载阶段" tabindex="-1">挂载阶段 <a class="header-anchor" href="#挂载阶段" aria-label="Permalink to &quot;挂载阶段&quot;">​</a></h2><h3 id="beforemount" tabindex="-1">beforeMount <a class="header-anchor" href="#beforemount" aria-label="Permalink to &quot;beforeMount&quot;">​</a></h3><p>触发时机</p><ul><li>编译模板生成渲染函数后，​首次渲染 DOM 前执行。</li><li>​此时的 DOM 状态： <code>虚拟 DOM 存在</code>，<code>但真实 DOM 未生成。</code></li></ul><p>​核心用途</p><ul><li>极少使用：通常情况下无需在此阶段操作。</li></ul><p>特殊场景：</p><ul><li>SSR（服务端渲染）中的混合（Hydration）前操作。</li><li>在渲染前对虚拟 DOM 进行修改（需谨慎）。 ​</li></ul><h4 id="面试问题-1" tabindex="-1">面试问题 <a class="header-anchor" href="#面试问题-1" aria-label="Permalink to &quot;面试问题&quot;">​</a></h4><ul><li>​Q: beforeMount 能访问 $el 吗？ ​- A: 不能，此时 $el 还未替换为真实 DOM（还是占位符如 ）。</li></ul><h3 id="mounted" tabindex="-1">mounted <a class="header-anchor" href="#mounted" aria-label="Permalink to &quot;mounted&quot;">​</a></h3><p>触发时机</p><ul><li>真实 DOM 完成渲染，​可访问所有 DOM 节点。</li><li>​注意：子组件可能尚未全部挂载（需用 this.$nextTick 确保）。</li></ul><p>核心用途</p><ul><li>操作 DOM 元素：集成图表库（如 ECharts）、地图（如高德地图）。</li><li>添加全局事件​（如 window.addEventListener(&#39;resize&#39;, callback)）。</li><li>获取元素尺寸或位置​（如 this.$el.offsetHeight）。</li></ul><p>​核心作用：</p><ul><li>​DOM 操作：组件 DOM 已渲染完成，可安全操作 DOM 或集成第三方库（如图表、地图）。</li><li>​事件监听：添加全局事件（如 window.addEventListener）。</li></ul><p>注意事项</p><ul><li>​避免同步修改数据导致死循环：修改数据后可能触发重新渲染。</li><li>​清理外部库的副作用：如销毁第三方库实例。</li></ul><h4 id="面试问题-2" tabindex="-1">面试问题 <a class="header-anchor" href="#面试问题-2" aria-label="Permalink to &quot;面试问题&quot;">​</a></h4><ul><li>Q:在 mounted 中修改数据会发生什么?</li><li>A: <code>触发重新渲染，可能进入更新阶段。</code> 在 mounted 中频繁修改数据（如循环中大量赋值），可能导致多次重复渲染。</li><li>Q: mounted 一定能获取到所有子组件的 DOM 吗？</li><li>A: 不一定，可通过 this.$nextTick(() =&gt; {}) 确保子组件挂载完成。</li></ul><h2 id="更新阶段" tabindex="-1">更新阶段 <a class="header-anchor" href="#更新阶段" aria-label="Permalink to &quot;更新阶段&quot;">​</a></h2><h3 id="beforeupdate" tabindex="-1">beforeUpdate <a class="header-anchor" href="#beforeupdate" aria-label="Permalink to &quot;beforeUpdate&quot;">​</a></h3><p>触发时机</p><ul><li>数据变动后，​DOM 重新渲染前触发。</li></ul><p>核心用途</p><ul><li>​高效场景： <ul><li>获取更新前的 DOM 状态（如滚动位置）。</li><li>记录数据快照（调试或回滚逻辑）。</li></ul></li></ul><p>注意事项</p><ul><li>​避免数据修改：容易导致循环更新。</li></ul><h3 id="updated" tabindex="-1">updated <a class="header-anchor" href="#updated" aria-label="Permalink to &quot;updated&quot;">​</a></h3><p>触发时机</p><ul><li>DOM 已根据最新数据完成渲染。</li></ul><p>核心用途</p><ul><li>​外部库的动态更新： <ul><li>当数据变化导致 DOM 变化后，更新第三方库（如重新渲染图表）。</li></ul></li></ul><p>注意事项</p><ul><li>​不可修改触发更新的数据：</li><li>如必须修改，请通过条件判断终止递归。 ​</li></ul><h4 id="面试问题-3" tabindex="-1">面试问题 <a class="header-anchor" href="#面试问题-3" aria-label="Permalink to &quot;面试问题&quot;">​</a></h4><ul><li>Q: updated 适合处理数据吗？</li><li>A: 不适合，应尽量在 watch 或计算属性中处理。</li></ul><h2 id="销毁阶段" tabindex="-1">销毁阶段 <a class="header-anchor" href="#销毁阶段" aria-label="Permalink to &quot;销毁阶段&quot;">​</a></h2><h3 id="beforedestroy" tabindex="-1">beforeDestroy <a class="header-anchor" href="#beforedestroy" aria-label="Permalink to &quot;beforeDestroy&quot;">​</a></h3><p>触发时机</p><ul><li>实例销毁前，​此时所有功能仍可用。</li></ul><p>​核心用途（资源清理）</p><ul><li>移除事件监听（如 window.removeEventListener）。</li><li>清除定时器、动画帧。</li><li>断开 WebSocket 连接。</li><li>重置第三方库状态（如地图销毁）。</li></ul><h4 id="面试问题-4" tabindex="-1">面试问题 <a class="header-anchor" href="#面试问题-4" aria-label="Permalink to &quot;面试问题&quot;">​</a></h4><ul><li>​Q: 组件销毁后，为何仍需手动清理全局事件？</li><li>A: 全局事件不属于当前组件，销毁后若不解除引用，会导致内存泄露。</li></ul><h3 id="destroyed" tabindex="-1">destroyed <a class="header-anchor" href="#destroyed" aria-label="Permalink to &quot;destroyed&quot;">​</a></h3><p>触发时机</p><ul><li>实例销毁完成，​所有子组件也已销毁。</li></ul><p>核心用途</p><ul><li>​极小众用途： <ul><li>记录组件销毁日志（如埋点上报）。 ​</li></ul></li></ul><h4 id="面试问题-5" tabindex="-1">面试问题 <a class="header-anchor" href="#面试问题-5" aria-label="Permalink to &quot;面试问题&quot;">​</a></h4><ul><li>​Q: 可以在 destroyed 中释放资源吗？</li><li>A: 不建议，beforeDestroy 更合适，此时实例尚未销毁。</li></ul><h2 id="缓存" tabindex="-1">缓存 <a class="header-anchor" href="#缓存" aria-label="Permalink to &quot;缓存&quot;">​</a></h2><h3 id="activated-和-deactivated" tabindex="-1">activated 和 deactivated <a class="header-anchor" href="#activated-和-deactivated" aria-label="Permalink to &quot;activated 和 deactivated&quot;">​</a></h3><p>触发条件</p><ul><li>组件被<code>&lt;keep-alive&gt;</code>包裹时，切换显示状态触发：</li><li>activated: 从缓存中激活时。</li><li>deactivated: 切换出去进入缓存时。 ​ 核心用途</li><li>​缓存组件状态管理：</li><li>保留滚动条位置。</li><li>恢复/暂停动画（如视频播放器）。</li></ul><h4 id="面试问题-6" tabindex="-1">面试问题 <a class="header-anchor" href="#面试问题-6" aria-label="Permalink to &quot;面试问题&quot;">​</a></h4><ul><li>​Q: activated 等同于 mounted 吗？</li><li>A: 不等同，缓存组件首次加载时才走 mounted，二次激活走 activated。</li></ul><h2 id="父子组件生命周期执行顺序详解" tabindex="-1">父子组件生命周期执行顺序详解 <a class="header-anchor" href="#父子组件生命周期执行顺序详解" aria-label="Permalink to &quot;父子组件生命周期执行顺序详解&quot;">​</a></h2><p>挂载阶段</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>父 beforeCreate → 父 created → 父 beforeMount →  </span></span>
<span class="line"><span>子 beforeCreate → 子 created → 子 beforeMount → 子 mounted →  </span></span>
<span class="line"><span>父 mounted</span></span></code></pre></div><p>更新阶段（父组件数据变化）​</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>父 beforeUpdate → 子 beforeUpdate → 子 updated → 父 updated</span></span></code></pre></div><p>销毁阶段</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>父 beforeDestroy → 子 beforeDestroy → 子 destroyed → 父 destroyed</span></span></code></pre></div><h4 id="高频面试问题" tabindex="-1">高频面试问题 <a class="header-anchor" href="#高频面试问题" aria-label="Permalink to &quot;高频面试问题&quot;">​</a></h4><ul><li>Q: 如果在子组件的 mounted 中修改父组件数据，会触发父组件的更新吗？</li><li>A: 会！父组件的重新渲染将触发父 beforeUpdate → 子 beforeUpdate → ...</li></ul>`,90)]))}const b=a(o,[["render",d]]);export{c as __pageData,b as default};
